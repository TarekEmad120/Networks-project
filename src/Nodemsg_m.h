//
// Generated file, do not edit! Created by nedtool 5.7 from Nodemsg.msg.
//

#ifndef __NODEMSG_M_H
#define __NODEMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <bitset>
typedef  std::bitset<8> bits;
// }}

/**
 * Class generated from <tt>Nodemsg.msg:26</tt> by nedtool.
 * <pre>
 * packet Nodemsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int Seq_Num;
 *     string payload;
 *     int M_Type; // data = 0, ack = 1, nack = 2
 *     int Ack_Num;
 *     bits mycheckbits;
 * }
 * </pre>
 *
 * Nodemsg_Base is only useful if it gets subclassed, and Nodemsg is derived from it.
 * The minimum code to be written for Nodemsg is the following:
 *
 * <pre>
 * class Nodemsg : public Nodemsg_Base
 * {
 *   private:
 *     void copy(const Nodemsg& other) { ... }

 *   public:
 *     Nodemsg(const char *name=nullptr, short kind=0) : Nodemsg_Base(name,kind) {}
 *     Nodemsg(const Nodemsg& other) : Nodemsg_Base(other) {copy(other);}
 *     Nodemsg& operator=(const Nodemsg& other) {if (this==&other) return *this; Nodemsg_Base::operator=(other); copy(other); return *this;}
 *     virtual Nodemsg *dup() const override {return new Nodemsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Nodemsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Nodemsg)
 * </pre>
 */
class Nodemsg_Base : public ::omnetpp::cPacket
{
  protected:
    int Seq_Num;
    ::omnetpp::opp_string payload;
    int M_Type;
    int Ack_Num;
    bits mycheckbits;

  private:
    void copy(const Nodemsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Nodemsg_Base&);
    // make constructors protected to avoid instantiation


    // make assignment operator protected to force the user override it

  public:
    Nodemsg_Base(const char *name=nullptr, short kind=0);
    Nodemsg_Base(const Nodemsg_Base& other);
    Nodemsg_Base& operator=(const Nodemsg_Base& other);

    virtual ~Nodemsg_Base();
    virtual Nodemsg_Base *dup() const override {return new Nodemsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSeq_Num() const;
    virtual void setSeq_Num(int Seq_Num);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
    virtual int getM_Type() const;
    virtual void setM_Type(int M_Type);
    virtual int getAck_Num() const;
    virtual void setAck_Num(int Ack_Num);
    virtual bits& getMycheckbits();
    virtual const bits& getMycheckbits() const {return const_cast<Nodemsg_Base*>(this)->getMycheckbits();}
    virtual void setMycheckbits(const bits& mycheckbits);
};


#endif // ifndef __NODEMSG_M_H
