//
// Generated file, do not edit! Created by nedtool 5.7 from Coordinatormsg.msg.
//

#ifndef __COORDINATORMSG_M_H
#define __COORDINATORMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Coordinatormsg.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Coordinatormsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     string MType = "coordinator";
 *     int ST_Node;
 *     int ST_Time;
 * 
 * }
 * </pre>
 *
 * Coordinatormsg_Base is only useful if it gets subclassed, and Coordinatormsg is derived from it.
 * The minimum code to be written for Coordinatormsg is the following:
 *
 * <pre>
 * class Coordinatormsg : public Coordinatormsg_Base
 * {
 *   private:
 *     void copy(const Coordinatormsg& other) { ... }

 *   public:
 *     Coordinatormsg(const char *name=nullptr, short kind=0) : Coordinatormsg_Base(name,kind) {}
 *     Coordinatormsg(const Coordinatormsg& other) : Coordinatormsg_Base(other) {copy(other);}
 *     Coordinatormsg& operator=(const Coordinatormsg& other) {if (this==&other) return *this; Coordinatormsg_Base::operator=(other); copy(other); return *this;}
 *     virtual Coordinatormsg *dup() const override {return new Coordinatormsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Coordinatormsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Coordinatormsg)
 * </pre>
 */
class Coordinatormsg_Base : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string MType;
    int ST_Node;
    int ST_Time;

  private:
    void copy(const Coordinatormsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Coordinatormsg_Base&);
    // make constructors protected to avoid instantiation

    Coordinatormsg_Base(const Coordinatormsg_Base& other);
    // make assignment operator protected to force the user override it
    Coordinatormsg_Base& operator=(const Coordinatormsg_Base& other);

  public:
    Coordinatormsg_Base(const char *name=nullptr, short kind=0);
    virtual ~Coordinatormsg_Base();
    virtual Coordinatormsg_Base *dup() const override {return new Coordinatormsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getMType() const;
    virtual void setMType(const char * MType);
    virtual int getST_Node() const;
    virtual void setST_Node(int ST_Node);
    virtual int getST_Time() const;
    virtual void setST_Time(int ST_Time);
};


#endif // ifndef __COORDINATORMSG_M_H
